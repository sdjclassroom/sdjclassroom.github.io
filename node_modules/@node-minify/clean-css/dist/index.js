"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/index.ts
var import_utils = require("@node-minify/utils");
var import_clean_css = __toESM(require("clean-css"));
var minifyCleanCSS = ({
  settings,
  content,
  callback,
  index
}) => {
  if (settings?.options?.sourceMap) {
    settings.options._sourceMap = settings.options.sourceMap;
    settings.options.sourceMap = true;
  }
  const _cleanCSS = new import_clean_css.default(
    settings && { returnPromise: false, ...settings.options }
  ).minify(content ?? "");
  const contentMinified = _cleanCSS.styles;
  if (_cleanCSS.sourceMap && typeof settings?.options?._sourceMap === "object" && "url" in settings.options._sourceMap) {
    import_utils.utils.writeFile({
      file: typeof settings.options._sourceMap.url === "string" ? settings.options._sourceMap.url : "",
      content: _cleanCSS.sourceMap.toString(),
      index
    });
  }
  if (settings && !settings.content && settings.output) {
    settings.output && import_utils.utils.writeFile({
      file: settings.output,
      content: contentMinified,
      index
    });
  }
  if (callback) {
    return callback(null, contentMinified);
  }
  return contentMinified;
};
minifyCleanCSS.default = minifyCleanCSS;
module.exports = minifyCleanCSS;
/*!
 * node-minify
 * Copyright(c) 2011-2024 Rodolphe Stoclin
 * MIT Licensed
 */
//# sourceMappingURL=index.js.map